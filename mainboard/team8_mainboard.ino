
/*            */
/* MAIN BORAD */
/*            */

/*
[[ FRAP ( Fire Report As soon as Possible) ]]
:: All-In-One fire extinguisher for automatic reporting and maintenance
[[ Features ]]
  
  1. Automatic fire report.
    ⚫ Detecting fire extinguisher's weight through a pressure sensor in the box. 
    ⚫ If the fire extinguisher is off for a certain time, TTS ( Text to Speech ) will be initiated.
    ⚫ After passing the certain time, it will notify gas and temperature values at the momenth 
      to users through an application.
  
  2. Fire extinguisher maintenance.
    ⚫ There is a ON/OFF switch. When maintenance is began, the switch is supposed to be OFF.
    ⚫ The switch will be ON after passing the certain maintenance time.
    ⚫ As soon as the switch is ON, it will notify the info to the maintenaner.
  
  3. Gas and Temperature remote detection.
    ⚫ Listening to detecting gas and temperature.
    ⚫ If one of them is over its threshold, it will send both data to the main board.
[[ Features in MAIN BORAD ]] 
  1. Listening to SLAVE BOARD through HC-05
  2. Detecting fire extinguisher's existence through HC-SR04
  3. Switching to the maintenance mode that doesn't activate sending notifications through 
  4. Sending notifications automatically if some conditions are satisfied through 
                                         [ GAS / TEMPERATURE / PRESSURE ] 
*/
#include <digitalWriteFast.h>

#include "Talkie.h"
#include "talkie.h"
//#include "Vocab_US_Acorn.h"
#include <SoftwareSerial.h>
#include <Adafruit_NeoPixel.h>
SoftwareSerial mySerial(2, 4); //블루투스의 Tx, Rx핀을 2번 3번핀으로 설정

/* Text To Speech */
Talkie voice;
const uint8_t spONE[]       PROGMEM = {0xA6,0x90,0x76,0xCC,0x43,0x6B,0xB9,0x42,0xD8,0x35,0x77,0xA9,0x19,0x72,0xE5,0x46,0xD2,0x62,0x56,0xCB,0xAC,0x9F,0x68,0xE1,0x4E,0x23,0x09,0x71,0x23,0x55,0x3A,0x9E,0xB8,0xC4,0x4B,0x77,0x6D,0x74,0xE3,0x93,0x54,0x7B,0xE5,0x6E,0x2D,0x4F,0xD6,0xEC,0x56,0x84,0xB5,0x3A,0x45,0x0D,0x5D,0xA1,0xD6,0xA8,0xF4,0xC5,0x58,0x84,0x78,0xEC,0x34,0x64,0x6D,0x16,0xEA,0x8D,0xC2,0x90,0x95,0x66,0xB1,0x25,0x0E,0x43,0x92,0x1A,0x43,0x9E,0x26,0x0C,0x49,0x49,0xB4,0x78,0xEA,0x34,0x16,0x1B,0xA6,0xEA,0xB1,0xC9,0x24,0x82,0xBB,0x88,0xC8,0x06,0x00,0xF8,0x26};
const uint8_t spTWO[]       PROGMEM = {0x0E,0x58,0x56,0xCB,0x00,0xD7,0xAB,0x19,0xE0,0x38,0xCB,0xE6,0x0C,0x65,0x8A,0x61,0xAD,0x86,0x9D,0xA5,0x79,0xA4,0x2D,0x1E,0x6E,0x61,0x69,0x9A,0xF6,0x79,0x04,0x85,0xA4,0x6B,0xC8,0xEF,0x16,0x17,0x94,0xA1,0xC1,0xBB,0x5B,0x5E,0x61,0x86,0x05,0x7E,0x0A,0xA5,0x0A,0x25,0xA6,0x75,0x3A,0x34,0x8E,0x5F,0xA8,0xEB,0x4B,0xD7,0x49,0xBB,0xE6,0x12,0x8F,0xDD,0xE0,0xC5,0x78,0xB2,0xBC,0x36,0x83,0x15,0xEB,0x2E,0xF2,0x48,0x0D,0x46,0x9E,0x89,0xE9,0x2B,0x31,0xC8,0x32,0x2C,0x9E,0xAB,0xFF,0x5A,0x26};
const uint8_t spTHREE[]     PROGMEM = {0x08,0xA8,0xC2,0x8C,0x02,0x04,0x68,0x2A,0xDC,0xF9,0x51,0x5B,0x96,0x79,0x8D,0x10,0xE5,0xCA,0x2E,0x9A,0x76,0x72,0xD0,0xC2,0x5C,0x25,0x21,0x23,0xCD,0x0C,0x4F,0xD4,0x22,0x7A,0x46,0x34,0x3E,0xF1,0x48,0x86,0xD2,0xB1,0xEA,0x24,0x33,0x16,0x62,0xE7,0xAA,0x55,0xAC,0xD4,0x04,0xD5,0x8D,0x47,0xB3,0x53,0x33,0xE4,0x2C,0x69,0xED,0x4E,0x81,0x30,0x53,0xA7,0xF5,0xBB,0x14,0x43,0xF4,0x92,0x36,0xEC,0x92,0x04,0xD5,0x4B,0xD2,0xB8,0xAB,0x23,0xF4,0x34,0xCE,0x63,0x19,0x57,0x73,0x84,0xAE,0x26,0x69,0x9C,0x8D,0xC0,0xAB,0x6B,0x87,0xB1,0x7B,0x94,0x99,0x8A,0xF2,0x5A,0x66};
const uint8_t spFOUR[]      PROGMEM = {0x08,0xA8,0xCA,0x94,0x00,0x5D,0x84,0x31,0x20,0xA9,0x0A,0x05,0x54,0x1D,0x16,0xBC,0xAA,0xDC,0xC3,0xC4,0xCE,0x0A,0x92,0xDA,0x94,0xA0,0x4D,0xC7,0x4F,0x7C,0xDA,0x0B,0x73,0x9F,0x20,0xAA,0x2D,0x73,0xCE,0x75,0x92,0x28,0xB7,0x23,0xD9,0xF7,0xCA,0x82,0xB9,0x16,0xD3,0x5C,0xA3,0x88,0x7A,0x2A,0x83,0x72,0x8D,0x2E,0xEA,0xED,0x08,0xCC,0xD3,0x86,0x68,0xB6,0xCD,0x29,0x77,0x19,0xA3,0xDE,0xD6,0xA0,0xDE,0x65,0x0C,0x66,0x5B,0x82,0x73,0x97,0x31,0xD8,0x2D,0x0B,0xEA,0x53,0xC6,0x10,0xB6,0x24,0xB8,0x77,0x99,0x42,0x98,0x4C,0xE5,0xDC,0x6E,0x0A,0xA3,0x4C,0xC3,0x17,0xFE,0x5A,0x16};
const uint8_t spFIVE[]      PROGMEM = {0x08,0xE8,0xD2,0x15,0x03,0x02,0xA8,0x3A,0x5D,0x01,0x55,0x96,0x0E,0x3F,0xA5,0x70,0xE7,0x98,0xBD,0x82,0xDC,0xDB,0x5D,0xAD,0xD6,0x0A,0x4A,0xF8,0x70,0xF5,0x86,0x27,0x2E,0xFE,0xD3,0xC5,0x6B,0x9D,0xB4,0xE9,0xAB,0x94,0x68,0x78,0xAA,0xEA,0x2F,0xC3,0xA3,0xF1,0xE9,0x6A,0xD8,0x88,0xF0,0xD9,0xA7,0x6F,0x61,0xA2,0xDC,0x66,0xAF,0xBE,0x85,0xB6,0x34,0x9B,0xB5,0xFA,0xEE,0x5D,0xD2,0x73,0xCE,0xEA,0xBB,0x33,0x8A,0xAC,0x3A,0x63,0xE8,0x56,0x29,0xAB,0xAB,0x94,0xBE,0x67,0x45,0xCB,0x9E,0x5D,0xFA,0xE6,0x04,0xB3,0x72,0x76,0xEA,0x8A,0x26,0x6F,0xCF,0x29,0xA9,0x4D,0xCA,0x34,0x3D,0x6A,0xC7,0xC1,0x0F,0xFF,0x5A,0x56};
const uint8_t spSIX[]       PROGMEM = {0x04,0xF8,0x82,0x8D,0x03,0x0A,0xF8,0xCA,0xDC,0x01,0x5F,0x79,0x28,0xE0,0xEB,0x30,0x05,0x7C,0xED,0xBE,0xBC,0xAD,0x8A,0x34,0x62,0xD5,0x0D,0x4E,0xB4,0xDC,0x12,0x87,0x77,0x1A,0xD5,0x28,0x09,0x1E,0xBE,0x24,0x36,0xA8,0x15,0xCA,0xDD,0x45,0x64,0x03,0x80,0x01,0xF2,0x54,0x31,0xC0,0x57,0x15,0x02,0xF8,0xCA,0x8C,0x01,0xDF,0x58,0x12,0xE0,0x1B,0x0B,0x04,0x7C,0x2F,0x86,0x80,0xEF,0xD4,0xFE,0x5A,0x36};
const uint8_t spSEVEN[]     PROGMEM = {0x08,0xF8,0x5C,0x9D,0x01,0x5F,0x78,0x08,0xE0,0x8B,0x74,0x05,0x7C,0x15,0xAE,0x81,0x61,0x57,0x6B,0x9A,0xDC,0x75,0x8E,0xD7,0x6D,0x48,0x89,0x2F,0x3E,0x41,0x0B,0xED,0x29,0x3A,0xFB,0x44,0xD5,0xA7,0x87,0xDA,0xA2,0x96,0xC4,0x50,0x11,0xCA,0xB5,0x54,0xAD,0x65,0x6A,0x88,0xB8,0x6A,0x6D,0x0E,0x63,0xC6,0xD6,0xB8,0x8D,0xB9,0x46,0x38,0xD9,0xEC,0x34,0xE5,0xAC,0x45,0xBE,0x75,0xC2,0x94,0x84,0x78,0xBB,0x37,0xB6,0x93,0x9E,0xC8,0x24,0x82,0xBB,0x88,0xC8,0x06,0x00,0x80,0xFF,0x5A,0x76};
const uint8_t spEIGHT[]     PROGMEM = {0x23,0x1E,0xC5,0x58,0x33,0xA7,0x9E,0xA0,0x6A,0xF1,0xAD,0x9E,0xB2,0xE2,0xEE,0x49,0xAB,0x3A,0xCA,0x2A,0x66,0x72,0x94,0xE9,0xDA,0xBB,0x0A,0xC3,0x30,0x8C,0xB5,0x1D,0x5B,0x4C,0x42,0xB9,0xBB,0x88,0x6C,0x00,0x00,0x01,0x5C,0x91,0x26,0x01,0x04,0x14,0x9F,0xFA,0x5A,0x0E};
const uint8_t spNINE[]      PROGMEM = {0xA1,0x4A,0x4C,0xF4,0x31,0xDD,0x85,0x32,0x71,0xB6,0xC7,0x74,0x97,0x8A,0xCC,0x54,0x1F,0xCB,0x5D,0xC9,0x33,0x35,0x7D,0xCC,0xE4,0x2D,0x6B,0x20,0xF9,0x58,0xEB,0x9F,0xA4,0xCB,0x56,0x13,0x6F,0x74,0xE2,0xAE,0x37,0x5C,0x3D,0xD1,0x89,0x9B,0xBD,0x74,0xF1,0x44,0x27,0x69,0xE6,0xDA,0xD5,0x13,0x9D,0xB4,0xAB,0x9B,0x10,0x4F,0x74,0xF2,0x29,0x67,0xC2,0x3C,0xE5,0x29,0xA7,0xE9,0xAA,0x90,0x54,0xA7,0x9A,0xBE,0x3D,0x52,0x5A,0x9D,0x66,0xC5,0x51,0x49,0x6B,0x74,0xDA,0x95,0x46,0x30,0xA2,0xD1,0xE8,0x66,0x2E,0xE4,0xCA,0xCA,0x6D,0x58,0x21,0x89,0x3A,0x23,0x87,0x21,0x73,0xB5,0x71,0x4D,0x6A,0x86,0x20,0x2C,0xCE,0xCD,0x89,0x1A,0x82,0xB0,0x5C,0xB5,0x24,0x6A,0x08,0x22,0x2A,0x2D,0x3D,0xAB,0x3E,0x4A,0xAD,0x34,0xF3,0xF5,0x5A,0x4E};
const uint8_t spTEN[]      PROGMEM = {0x0E, 0x38, 0x3C, 0x2D, 0x00, 0x5F, 0xB6, 0x19, 0x60, 0xA8, 0x90, 0x93, 0x36, 0x2B, 0xE2, 0x99, 0xB3, 0x4E, 0xD9, 0x7D, 0x89, 0x85, 0x2F, 0xBE, 0xD5, 0xAD, 0x4F, 0x3F, 0x64, 0xAB, 0xA4, 0x3E, 0xBA, 0xD3, 0x59, 0x9A, 0x2E, 0x75, 0xD5, 0x39, 0x6D, 0x6B, 0x0A, 0x2D, 0x3C, 0xEC, 0xE5, 0xDD, 0x1F, 0xFE, 0xB0, 0xE7, 0xFF, 0x03};
const uint8_t spEMERGENCY[] PROGMEM = {0xA3,0x5B,0xCE,0x18,0x23,0x9F,0xAC,0x76,0x79,0x13,0x88,0x7C,0xB2,0xAA,0x19,0x8C,0x21,0x72,0xF5,0xAA,0x5A,0x50,0xD2,0xB0,0xD5,0xA9,0x76,0x52,0xB2,0x53,0xAD,0x95,0x26,0x72,0xD5,0x1A,0x8D,0xD6,0xDA,0x24,0xC5,0x22,0xC2,0x5E,0xAB,0x93,0xD6,0xB0,0x54,0xA5,0xAB,0x88,0x31,0xCD,0x93,0x92,0xAD,0x3C,0xDB,0x56,0x59,0xF6,0xB6,0x92,0x5C,0x83,0x6C,0x30,0xEB,0x0A,0x4A,0x5D,0xC6,0x45,0xAF,0x23,0xA8,0x53,0xC8,0xC2,0xF2,0xAA,0x24,0x3B,0x12,0xD3,0x6E,0xED,0xF2,0xB3,0x0C,0x99,0xDD,0x4B,0x00,0xB6,0x13,0x3A,0xE5,0xD4,0xA6,0xAC,0x91,0xE7,0x54,0xC3,0xA4,0xA1,0xE9,0xB6,0xD3,0x4E,0x19,0x46,0xA1,0xFD,0x46,0x3B,0xB9,0x8A,0x8E,0xB4,0x29,0x43,0x15,0xC2,0x93,0x1C,0xBD,0x8C,0x45,0xB0,0x8D,0x71,0xBD,0x36,0x6D,0xA6,0xA6,0xA2,0x69,0x0D,0xF0,0x8C,0xAB,0x02,0x7E,0x4A,0x31,0xC0,0x6F,0xA5,0x16,0x18,0x55,0x37,0x2E,0xEA,0xFE,0x65,0x0C,0x43,0xBB,0x50,0xFA,0x96,0x36,0x4E,0x93,0x82,0xE5,0x7B,0xDB,0x32,0x94,0x33,0x6E,0xFC,0x19,0xDB,0x74,0xC1,0x58,0xB1,0xA6,0xEC,0xCB,0x17,0x43,0xFA,0x9A,0x70,0x0C,0x6F,0x60,0x55,0xAB,0xFF,0x1F};
const uint8_t *speech[11] = {spEMERGENCY, spONE, spTWO, spTHREE, spFOUR, spFIVE, spSIX, spSEVEN, spEIGHT, spNINE, spTEN};

/* Macros */
#define daytosecond 86400;

/* Pin variables*/
const int trigPin = A0;
const int echoPin = A1;
const int buttPin = A4;
const int strip_led = A5;

/* Third-party variables */
const float D = 3; // = Distance threshold
const float T = 500; // = Temperature threshold
const float G = 150; // = Gas threshold

int data[2] = {0};
int led_num = 20, i;
int On = 1;

char* Seg_ExtingID = "E-2";

float duration = 0; 
float T_Value; // = Temperature value
float G_Value; // = Gas value

uint8_t Pressure_Count = 10; // = 10 seconds.
uint8_t Sensor_Count = 5; // one notification if 5 alarm is in a row.
uint16_t Clean_Count = 30; // 30 days 

boolean Clean = true; // ON (If it is ON, it's the time to check and maintain the fire extinguisher.
boolean Flag = false;
boolean fireOn = false;
boolean segOn = false;

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(led_num, strip_led, NEO_GRB + NEO_KHZ800);

/* Functions */
boolean checkFunction(float T_Value, float G_Value, float T, float G);
uint32_t Distance(float duration);
float Get_T();
float Get_G();
void SendNotification();
float returnTemperature(float sensorValue);
void printTest(uint32_t temp, float data0, float data1, uint32_t Distance_cm);
void led_red();
void led_green();
void led_seperate();

/**************************************************************************************/
/**************************************************************************************/
/**************************************************************************************/
/**************************************************************************************/

void setup() {
  pinMode(trigPin,OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(buttPin, INPUT);
  Serial.begin(9600);
  
  Serial.println("Hello World!");
  mySerial.begin(9600);

  pixels.begin();

  digitalWrite(10, 0);
}

void loop() { 

  uint32_t temp = daytosecond;
  if (mySerial.available()) { // data from slave

    // data is saved
    data[0] = mySerial.parseFloat();
    data[1] = mySerial.parseFloat();
  }
  if (digitalRead(buttPin) == 1){ // button is clicked
      Clean = false;
    }
  
  if (!segOn){
      Serial.println(Seg_ExtingID);
  }
  
  if (!fireOn){
    if (Clean){
    led_red();
    }else{
      led_green();
      }
    }
  
  /* 1. Fire extinguisher management */
  if ((Clean == false) && (Flag == false)){
      Flag = true;
    }

  if (Flag){
      temp--;
      if(temp == 0){
        Clean_Count--;
        temp = daytosecond;
        }
      if(Clean_Count == 0){
          Flag = false;
          Clean = true;
          Clean_Count = 30;
        }
    }
  
  /* 2. Ultrasonic wave detection */
  
  digitalWrite(trigPin,LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin,HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin,HIGH);
  uint32_t Distance_cm = Distance(duration);
  
  if (On == 1){
    if (Distance_cm > D){
        fireOn = true;
        voice.say(speech[Pressure_Count]);
        delay(1000);
        Pressure_Count--;
        Serial.println(Pressure_Count);
        segOn = true;  
      
        led_seperate();
        if(Pressure_Count == 0){
          SendNotification();
          voice.say(speech[0]);
          voice.say(speech[0]);
          voice.say(speech[0]);
          Pressure_Count = 10;
          On = 0;
          segOn = false;
          }
      }
    else{
        Pressure_Count = 10;
    }
  }

  if(Distance_cm < D){
    fireOn = false;
    On = 1;
    }
  
  /* 3. Gas / Temperature checking */
  if (checkFunction(Get_T(), Get_G(), T, G)){ // one of them is over its threshold.
      Sensor_Count--;
      if(Sensor_Count == 0){  
        SendNotification();
        Sensor_Count = 5;
      }
    }
}


/**************************************************************************************/
/**************************************************************************************/
/**************************************************************************************/
/**************************************************************************************/

                              /* Implementing Functions */

uint32_t Distance(float duration){
  uint32_t DistanceCalc;
  //DistanceCalc = ((time/2.9)/2);
  DistanceCalc = ((float)(340 * duration) / 10000) / 2; // cm
  return DistanceCalc;
}

float Get_T(){
    // return temperature from slave
    return returnTemperature(data[1]);
  }

  
float Get_G(){
    // return Gas from slave
    return data[0];
  }
void SendNotification() {
   // send notification through wifi
   digitalWrite(10, HIGH);
   delay(1000);
   digitalWrite(10, LOW);
}
boolean checkFunction(float T_Value, float G_Value, float T, float G){
  if((T_Value > T) || (G_Value > G)){
      return true; // detection success
    }
  else{
      return false;
    }
  }

float returnTemperature(float sensorValue){
  float voltage = sensorValue *5000.0/1024.0; 
    // Voltage changed from the value estimated by the sensor. 
  
  float celsius = (voltage -500)/10.0; 
    // Temperature changed from Voltage.

  return celsius;
  }


void printTest(uint32_t temp, float data0, float data1, uint32_t Distance_cm){
    Serial.println("temp, Clean_Count, Pressure_Count, Gas, Temperature, Distance_cm");
    Serial.print(temp);
    Serial.print(",");
    Serial.print(Clean_Count);
    Serial.print(",");
    Serial.print(Pressure_Count);
    Serial.print(",");
    Serial.print(data0);
    Serial.print(",");
    Serial.print(data1);
    Serial.print(",");
    Serial.println(Distance_cm);
  }
/**************************************************************************************/
/**************************************************************************************/

                              /* LED  */
void led_red() {
  for (i = 0; i < pixels.numPixels(); i++) {
    pixels.setPixelColor(i, 255, 0, 0);
    pixels.show();
  }
}

void led_green() {
  for (i = 0; i < pixels.numPixels(); i++) {
    pixels.setPixelColor(i, 0, 255, 0);
    pixels.show();
  }
}

void led_red_blink() {
  for (i = 0; i < pixels.numPixels(); i++) {
    pixels.setPixelColor(i, 255, 0, 0);
    pixels.show();
  }
  delay(500);
  pixels.clear();
  pixels.show();
  delay(500);
}

void led_seperate(){
  for (i = 0; i < 10; i++) {
    pixels.setPixelColor(i, 255, 0, 0);
    pixels.show();
  }
  delay(100);
  pixels.clear();
  pixels.show();
  for( i = 11; i < pixels.numPixels(); i++){
    pixels.setPixelColor(i, 255, 0, 0);
    pixels.show();
  }
  delay(100);
  pixels.clear();
  pixels.show();
}

void led_police(){
  led_police();
  for (i = 0; i < 10; i++) {
    pixels.setPixelColor(i, 255, 0, 0);
    pixels.show();
  }
  delay(100);
  pixels.clear();
  pixels.show();
  for( i = 11; i < pixels.numPixels(); i++){
    pixels.setPixelColor(i, 0, 0, 255);
    pixels.show();
  }
  delay(100);
  pixels.clear();
  pixels.show();
}

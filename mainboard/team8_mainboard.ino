

/*            */
/* MAIN BORAD */
/*            */

/*
[[ FRAP ( Fire Report As soon as Possible) ]]
:: All-In-One fire extinguisher for automatic reporting and maintenance

[[ Features ]]
  
  1. Automatic fire report.
    ⚫ Detecting fire extinguisher's weight through a pressure sensor in the box. 
    ⚫ If the fire extinguisher is off for a certain time, TTS ( Text to Speech ) will be initiated.
    ⚫ After passing the certain time, it will notify gas and temperature values at the momenth 
      to users through an application.
  
  2. Fire extinguisher maintenance.
    ⚫ There is a ON/OFF switch. When maintenance is began, the switch is supposed to be OFF.
    ⚫ The switch will be ON after passing the certain maintenance time.
    ⚫ As soon as the switch is ON, it will notify the info to the maintenaner.
  
  3. Gas and Temperature remote detection.
    ⚫ Listening to detecting gas and temperature.
    ⚫ If one of them is over its threshold, it will send both data to the main board.

[[ Features in MAIN BORAD ]] 

  1. Listening to SLAVE BOARD through HC-05

  2. Detecting fire extinguisher's existence through HC-SR04

  3. Switching to the maintenance mode that doesn't activate sending notifications through 

  4. Sending notifications automatically if some conditions are satisfied through 
                                         [ GAS / TEMPERATURE / PRESSURE ] 
*/

#include "talkie.h"
#include <SoftwareSerial.h>

SoftwareSerial mySerial(2, 3); //블루투스의 Tx, Rx핀을 2번 3번핀으로 설정

/* Text To Speech */
Talkie voice;
const uint8_t spONE[]      PROGMEM = {0x66, 0x4E, 0xA8, 0x7A, 0x8D, 0xED, 0xC4, 0xB5, 0xCD, 0x89, 0xD4, 0xBC, 0xA2, 0xDB, 0xD1, 0x27, 0xBE, 0x33, 0x4C, 0xD9, 0x4F, 0x9B, 0x4D, 0x57, 0x8A, 0x76, 0xBE, 0xF5, 0xA9, 0xAA, 0x2E, 0x4F, 0xD5, 0xCD, 0xB7, 0xD9, 0x43, 0x5B, 0x87, 0x13, 0x4C, 0x0D, 0xA7, 0x75, 0xAB, 0x7B, 0x3E, 0xE3, 0x19, 0x6F, 0x7F, 0xA7, 0xA7, 0xF9, 0xD0, 0x30, 0x5B, 0x1D, 0x9E, 0x9A, 0x34, 0x44, 0xBC, 0xB6, 0x7D, 0xFE, 0x1F};
const uint8_t spTWO[]      PROGMEM = {0x06, 0xB8, 0x59, 0x34, 0x00, 0x27, 0xD6, 0x38, 0x60, 0x58, 0xD3, 0x91, 0x55, 0x2D, 0xAA, 0x65, 0x9D, 0x4F, 0xD1, 0xB8, 0x39, 0x17, 0x67, 0xBF, 0xC5, 0xAE, 0x5A, 0x1D, 0xB5, 0x7A, 0x06, 0xF6, 0xA9, 0x7D, 0x9D, 0xD2, 0x6C, 0x55, 0xA5, 0x26, 0x75, 0xC9, 0x9B, 0xDF, 0xFC, 0x6E, 0x0E, 0x63, 0x3A, 0x34, 0x70, 0xAF, 0x3E, 0xFF, 0x1F};
const uint8_t spTHREE[]    PROGMEM = {0x0C, 0xE8, 0x2E, 0x94, 0x01, 0x4D, 0xBA, 0x4A, 0x40, 0x03, 0x16, 0x68, 0x69, 0x36, 0x1C, 0xE9, 0xBA, 0xB8, 0xE5, 0x39, 0x70, 0x72, 0x84, 0xDB, 0x51, 0xA4, 0xA8, 0x4E, 0xA3, 0xC9, 0x77, 0xB1, 0xCA, 0xD6, 0x52, 0xA8, 0x71, 0xED, 0x2A, 0x7B, 0x4B, 0xA6, 0xE0, 0x37, 0xB7, 0x5A, 0xDD, 0x48, 0x8E, 0x94, 0xF1, 0x64, 0xCE, 0x6D, 0x19, 0x55, 0x91, 0xBC, 0x6E, 0xD7, 0xAD, 0x1E, 0xF5, 0xAA, 0x77, 0x7A, 0xC6, 0x70, 0x22, 0xCD, 0xC7, 0xF9, 0x89, 0xCF, 0xFF, 0x03};
const uint8_t spFOUR[]     PROGMEM = {0x08, 0x68, 0x21, 0x0D, 0x03, 0x04, 0x28, 0xCE, 0x92, 0x03, 0x23, 0x4A, 0xCA, 0xA6, 0x1C, 0xDA, 0xAD, 0xB4, 0x70, 0xED, 0x19, 0x64, 0xB7, 0xD3, 0x91, 0x45, 0x51, 0x35, 0x89, 0xEA, 0x66, 0xDE, 0xEA, 0xE0, 0xAB, 0xD3, 0x29, 0x4F, 0x1F, 0xFA, 0x52, 0xF6, 0x90, 0x52, 0x3B, 0x25, 0x7F, 0xDD, 0xCB, 0x9D, 0x72, 0x72, 0x8C, 0x79, 0xCB, 0x6F, 0xFA, 0xD2, 0x10, 0x9E, 0xB4, 0x2C, 0xE1, 0x4F, 0x25, 0x70, 0x3A, 0xDC, 0xBA, 0x2F, 0x6F, 0xC1, 0x75, 0xCB, 0xF2, 0xFF};
const uint8_t spFIVE[]     PROGMEM = {0x08, 0x68, 0x4E, 0x9D, 0x02, 0x1C, 0x60, 0xC0, 0x8C, 0x69, 0x12, 0xB0, 0xC0, 0x28, 0xAB, 0x8C, 0x9C, 0xC0, 0x2D, 0xBB, 0x38, 0x79, 0x31, 0x15, 0xA3, 0xB6, 0xE4, 0x16, 0xB7, 0xDC, 0xF5, 0x6E, 0x57, 0xDF, 0x54, 0x5B, 0x85, 0xBE, 0xD9, 0xE3, 0x5C, 0xC6, 0xD6, 0x6D, 0xB1, 0xA5, 0xBF, 0x99, 0x5B, 0x3B, 0x5A, 0x30, 0x09, 0xAF, 0x2F, 0xED, 0xEC, 0x31, 0xC4, 0x5C, 0xBE, 0xD6, 0x33, 0xDD, 0xAD, 0x88, 0x87, 0xE2, 0xD2, 0xF2, 0xF4, 0xE0, 0x16, 0x2A, 0xB2, 0xE3, 0x63, 0x1F, 0xF9, 0xF0, 0xE7, 0xFF, 0x01};
const uint8_t spSIX[]      PROGMEM = {0x04, 0xF8, 0xAD, 0x4C, 0x02, 0x16, 0xB0, 0x80, 0x06, 0x56, 0x35, 0x5D, 0xA8, 0x2A, 0x6D, 0xB9, 0xCD, 0x69, 0xBB, 0x2B, 0x55, 0xB5, 0x2D, 0xB7, 0xDB, 0xFD, 0x9C, 0x0D, 0xD8, 0x32, 0x8A, 0x7B, 0xBC, 0x02, 0x00, 0x03, 0x0C, 0xB1, 0x2E, 0x80, 0xDF, 0xD2, 0x35, 0x20, 0x01, 0x0E, 0x60, 0xE0, 0xFF, 0x01};
const uint8_t spSEVEN[]    PROGMEM = {0x0C, 0xF8, 0x5E, 0x4C, 0x01, 0xBF, 0x95, 0x7B, 0xC0, 0x02, 0x16, 0xB0, 0xC0, 0xC8, 0xBA, 0x36, 0x4D, 0xB7, 0x27, 0x37, 0xBB, 0xC5, 0x29, 0xBA, 0x71, 0x6D, 0xB7, 0xB5, 0xAB, 0xA8, 0xCE, 0xBD, 0xD4, 0xDE, 0xA6, 0xB2, 0x5A, 0xB1, 0x34, 0x6A, 0x1D, 0xA7, 0x35, 0x37, 0xE5, 0x5A, 0xAE, 0x6B, 0xEE, 0xD2, 0xB6, 0x26, 0x4C, 0x37, 0xF5, 0x4D, 0xB9, 0x9A, 0x34, 0x39, 0xB7, 0xC6, 0xE1, 0x1E, 0x81, 0xD8, 0xA2, 0xEC, 0xE6, 0xC7, 0x7F, 0xFE, 0xFB, 0x7F};
const uint8_t spEIGHT[]    PROGMEM = {0x65, 0x69, 0x89, 0xC5, 0x73, 0x66, 0xDF, 0xE9, 0x8C, 0x33, 0x0E, 0x41, 0xC6, 0xEA, 0x5B, 0xEF, 0x7A, 0xF5, 0x33, 0x25, 0x50, 0xE5, 0xEA, 0x39, 0xD7, 0xC5, 0x6E, 0x08, 0x14, 0xC1, 0xDD, 0x45, 0x64, 0x03, 0x00, 0x80, 0x00, 0xAE, 0x70, 0x33, 0xC0, 0x73, 0x33, 0x1A, 0x10, 0x40, 0x8F, 0x2B, 0x14, 0xF8, 0x7F};
const uint8_t spNINE[]     PROGMEM = {0xE6, 0xA8, 0x1A, 0x35, 0x5D, 0xD6, 0x9A, 0x35, 0x4B, 0x8C, 0x4E, 0x6B, 0x1A, 0xD6, 0xA6, 0x51, 0xB2, 0xB5, 0xEE, 0x58, 0x9A, 0x13, 0x4F, 0xB5, 0x35, 0x67, 0x68, 0x26, 0x3D, 0x4D, 0x97, 0x9C, 0xBE, 0xC9, 0x75, 0x2F, 0x6D, 0x7B, 0xBB, 0x5B, 0xDF, 0xFA, 0x36, 0xA7, 0xEF, 0xBA, 0x25, 0xDA, 0x16, 0xDF, 0x69, 0xAC, 0x23, 0x05, 0x45, 0xF9, 0xAC, 0xB9, 0x8F, 0xA3, 0x97, 0x20, 0x73, 0x9F, 0x54, 0xCE, 0x1E, 0x45, 0xC2, 0xA2, 0x4E, 0x3E, 0xD3, 0xD5, 0x3D, 0xB1, 0x79, 0x24, 0x0D, 0xD7, 0x48, 0x4C, 0x6E, 0xE1, 0x2C, 0xDE, 0xFF, 0x0F};
const uint8_t spTEN[]      PROGMEM = {0x0E, 0x38, 0x3C, 0x2D, 0x00, 0x5F, 0xB6, 0x19, 0x60, 0xA8, 0x90, 0x93, 0x36, 0x2B, 0xE2, 0x99, 0xB3, 0x4E, 0xD9, 0x7D, 0x89, 0x85, 0x2F, 0xBE, 0xD5, 0xAD, 0x4F, 0x3F, 0x64, 0xAB, 0xA4, 0x3E, 0xBA, 0xD3, 0x59, 0x9A, 0x2E, 0x75, 0xD5, 0x39, 0x6D, 0x6B, 0x0A, 0x2D, 0x3C, 0xEC, 0xE5, 0xDD, 0x1F, 0xFE, 0xB0, 0xE7, 0xFF, 0x03};
const uint8_t spEMERGENCY[] PROGMEM = {0xA3,0x5B,0xCE,0x18,0x23,0x9F,0xAC,0x76,0x79,0x13,0x88,0x7C,0xB2,0xAA,0x19,0x8C,0x21,0x72,0xF5,0xAA,0x5A,0x50,0xD2,0xB0,0xD5,0xA9,0x76,0x52,0xB2,0x53,0xAD,0x95,0x26,0x72,0xD5,0x1A,0x8D,0xD6,0xDA,0x24,0xC5,0x22,0xC2,0x5E,0xAB,0x93,0xD6,0xB0,0x54,0xA5,0xAB,0x88,0x31,0xCD,0x93,0x92,0xAD,0x3C,0xDB,0x56,0x59,0xF6,0xB6,0x92,0x5C,0x83,0x6C,0x30,0xEB,0x0A,0x4A,0x5D,0xC6,0x45,0xAF,0x23,0xA8,0x53,0xC8,0xC2,0xF2,0xAA,0x24,0x3B,0x12,0xD3,0x6E,0xED,0xF2,0xB3,0x0C,0x99,0xDD,0x4B,0x00,0xB6,0x13,0x3A,0xE5,0xD4,0xA6,0xAC,0x91,0xE7,0x54,0xC3,0xA4,0xA1,0xE9,0xB6,0xD3,0x4E,0x19,0x46,0xA1,0xFD,0x46,0x3B,0xB9,0x8A,0x8E,0xB4,0x29,0x43,0x15,0xC2,0x93,0x1C,0xBD,0x8C,0x45,0xB0,0x8D,0x71,0xBD,0x36,0x6D,0xA6,0xA6,0xA2,0x69,0x0D,0xF0,0x8C,0xAB,0x02,0x7E,0x4A,0x31,0xC0,0x6F,0xA5,0x16,0x18,0x55,0x37,0x2E,0xEA,0xFE,0x65,0x0C,0x43,0xBB,0x50,0xFA,0x96,0x36,0x4E,0x93,0x82,0xE5,0x7B,0xDB,0x32,0x94,0x33,0x6E,0xFC,0x19,0xDB,0x74,0xC1,0x58,0xB1,0xA6,0xEC,0xCB,0x17,0x43,0xFA,0x9A,0x70,0x0C,0x6F,0x60,0x55,0xAB,0xFF,0x1F};
char *speech[11] = {"spEMERGENCY", "spONE", "spTWO", "spTHREE", "spFOUR", "spFIVE", "spSIX", "spSEVEN", "spEIGHT", "spNINE", "spTEN"};

/* Macros */
#define daytosecond 86400;

/* Pin variables*/
const int trigPin = A0;
const int echoPin = A1;

/* Third-party variables */
const float D = 100; // = Distance threshold
const float T = 100; // = Temperature threshold
const float G = 100; // = Gas threshold
int data[2] = {0};
float duration = 0; 
float T_Value; // = Temperature value
float G_Value; // = Gas value
uint8_t Pressure_Count = 10; // = 10 seconds.
boolean Clean = true; // ON (If it is ON, it's the time to check and maintain the fire extinguisher.
boolean Flag = false;
uint16_t Clean_Count = 30; // 30 days 

/* Functions */
boolean checkFunction(float T_Value, float G_Value, float T, float G);
uint32_t Distance(float duration);
float Get_T();
float Get_G();
void SendNotification(float temperature_from_slave, float gas_from_slave);
float returnTemperature(float sensorValue);
void printTest(uint8_t temp, float data[0], float data[1], uint32_t Distance_cm);

/**************************************************************************************/
/**************************************************************************************/
/**************************************************************************************/
/**************************************************************************************/

void setup() {
  pinMode(trigPin,OUTPUT);
  pinMode(echoPin, INPUT);
  Serial.begin(9600);

  while (!Serial) {
    ;
  }
  
  Serial.println("Hello World!");
  mySerial.begin(9600);
}

void loop() {
  uint8_t temp = daytosecond;
  
  if (mySerial.available()) { // data from slave
    data[0] = mySerial.read();
    data[1] = mySerial.read();  
    Serial.println(data[0],data[1]);
  }
  
  /* 1. Fire extinguisher management */
  if ((Clean == false) && (Flag == false)){
      Flag = true;
    }

  if (Flag){
      temp--;
      delay(1000);
      if(temp == 0){
        Clean_Count--;
        temp = daytosecond;
        }
      if(Clean_Count == 0){
          Flag = false;
          Clean = true;
          Clean_Count = 30;
          delay(1000);
        }
    }
  /* 2. Ultrasonic wave detection */
  digitalWrite(trigPin,LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin,HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin,HIGH);
  uint32_t Distance_cm = Distance(duration);
  
  if (Distance_cm > D){
      voice.say(speech[Pressure_Count]);
      delay(1000);
      Pressure_Count--;

      if(Pressure_Count == 0){
        SendNotification(Get_T(), Get_G());
        voice.say(speech[0]);
        Pressure_Count = 10;
        }
    }
  else{
      Pressure_Count = 10;
    }
  
  /* 3. Gas / Temperature checking */
  if (checkFunction(Get_T(), Get_G(), T, G)){ // one of them is over its threshold.
      SendNotification(Get_T(), Get_G());
    }

  /* DEBUGGING */
  printTest(uint8_t temp, float data[0], float data[1], uint32_t Distance_cm);
}


/**************************************************************************************/
/**************************************************************************************/
/**************************************************************************************/
/**************************************************************************************/

                              /* Implementing Functions */

uint32_t Distance(float duration){
  uint32_t DistanceCalc;
  //DistanceCalc = ((time/2.9)/2);
  DistanceCalc = ((float)(340 * duration) / 10000) / 2; // cm
  return DistanceCalc;
}

float Get_T(){
    // return temperature from slave
    return data[1];
  }

  
float Get_G(){
    // return Gas from slave
    return data[0];
  }

void SendNotification(float temperature_from_slave, float gas_from_slave){
    // send notification through wifi
    delay(1000);
  }

boolean checkFunction(float T_Value, float G_Value, float T, float G){
  if(returnTemperature(T_Value) > T || G_Value > G){
      return true; // detection success
    }
  else{
      return false;
    }
  }

float returnTemperature(float sensorValue){
  float voltage = sensorValue *5000.0/1024.0; 
    // Voltage changed from the value estimated by the sensor. 
  
  float celsius = (voltage -500)/10.0; 
    // Temperature changed from Voltage.

  return celsius;
  }


void printTest(uint8_t temp, float data[0], float data[1], uint32_t Distance_cm){
    Serial.println("temp, Clean_Count, Pressure_Count, Gas, Temperature, Distance_cm");
    Serial.print(temp);
    Serial.print(",");
    Serial.print(Clean_Count);
    Serial.print(",");
    Serial.print(Pressure_Count);
    Serial.print(",");
    Serial.print(data[0]);
    Serial.print(",");
    Serial.print(data[1]);
    Serial.print(",");
    Serial.println(Distance_cm);
  }
